Problem Statement: Given head, the head of a linked list, determine if the linked list has a cycle in it. 
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.

Return true if there is a cycle in the linked list. Otherwise, return false.




//CODE


public class Solution {
    
    public static boolean detectCycle(Node<Integer> head) {
        //Your code goes here


        if(head.next == null) return false;
        
        Node slow = head;
        Node fast = head;

        slow = slow.next;
        fast = fast.next.next;



        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;

            if(slow == fast){
                return true;
            }
            
        }
        return false;
        
        
    }
}
